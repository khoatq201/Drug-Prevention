import React, { useState, useEffect, useRef } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import AdminSidebar from "../../components/layout/AdminSidebar";
import AdminHeader from "../../components/layout/AdminHeader";
import CourseGrid from "./CourseGrid";
import { MagnifyingGlassIcon, PlusIcon } from "@heroicons/react/24/outline";

const AdminCourses = () => {
  const { api, isAuthenticated, loading: authLoading } = useAuth();
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [filters, setFilters] = useState({
    category: "",
    level: "",
    isPublished: "",
    search: "",
  });
  const [pagination, setPagination] = useState({
    current: 1,
    total: 1,
    limit: 20,
  });
  const searchTimeout = useRef();

  // Ref ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ fetch 1 l·∫ßn khi AuthContext s·∫µn s√†ng
  const hasInitialFetch = useRef(false);

  useEffect(() => {
    // Ch·ªâ fetch khi AuthContext ƒë√£ ho√†n to√†n s·∫µn s√†ng
    if (isAuthenticated && !authLoading && !hasInitialFetch.current) {
      // Th√™m delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o AuthContext ƒë√£ c·∫≠p nh·∫≠t xong
      const timer = setTimeout(() => {
        console.log("üîç AdminCourses - AuthContext ready, fetching courses");
        fetchCourses();
        hasInitialFetch.current = true;
      }, 200);
      
      return () => clearTimeout(timer);
    }
  }, [isAuthenticated, authLoading]);

  // Fetch l·∫°i khi filters thay ƒë·ªïi (sau khi ƒë√£ fetch l·∫ßn ƒë·∫ßu)
  useEffect(() => {
    if (hasInitialFetch.current) {
      fetchCourses();
    }
  }, [filters.category, filters.level, filters.isPublished, pagination.current]);

  useEffect(() => {
    if (!isAuthenticated || authLoading) return;
    if (searchTimeout.current) clearTimeout(searchTimeout.current);
    searchTimeout.current = setTimeout(() => {
      fetchCourses();
    }, 400);
    return () => clearTimeout(searchTimeout.current);
    // eslint-disable-next-line
  }, [filters.search]);

  const fetchCourses = async () => {
    // Ki·ªÉm tra token tr∆∞·ªõc khi g·ªçi API
    const token = localStorage.getItem("token");
    if (!isAuthenticated || !token) {
      console.log("üîç AdminCourses - fetchCourses skipped - not ready:", { 
        isAuthenticated, 
        token: !!token 
      });
      return;
    }

    try {
      setLoading(true);
      console.log("üîç AdminCourses - fetchCourses called - all conditions met");
      
      const params = new URLSearchParams({
        page: pagination.current,
        limit: pagination.limit,
      });
      
      // Ch·ªâ th√™m filter n·∫øu c√≥ gi√° tr·ªã
      if (filters.category) params.append('category', filters.category);
      if (filters.level) params.append('level', filters.level);
      if (filters.isPublished !== "") params.append('isPublished', filters.isPublished);
      if (filters.search) params.append('search', filters.search);
      
      const response = await api.get(`/courses/admin/all?${params}`);
      if (response.data.success) {
        setCourses(response.data.data);
        setPagination(prev => ({
          ...prev,
          total: response.data.pagination.total,
        }));
      }
    } catch (err) {
      console.error("üîç AdminCourses - fetchCourses error:", err);
      setError("L·ªói khi t·∫£i danh s√°ch kh√≥a h·ªçc");
      
      // N·∫øu l·ªói 401, c√≥ th·ªÉ token ch∆∞a s·∫µn s√†ng
      if (err.response?.status === 401) {
        console.log("üîç AdminCourses - 401 error, token might not be ready");
        hasInitialFetch.current = false; // Reset ƒë·ªÉ c√≥ th·ªÉ th·ª≠ l·∫°i
      }
    } finally {
      setLoading(false);
    }
  };

  const handleFilterChange = (key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setPagination(prev => ({ ...prev, current: 1 }));
  };

  const handlePageChange = (page) => {
    setPagination(prev => ({ ...prev, current: page }));
  };

  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y?")) {
      return;
    }

    try {
      await api.delete(`/courses/${courseId}`);
      setSuccess("Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng");
      fetchCourses(); // Refresh list
    } catch (err) {
      setError("L·ªói khi x√≥a kh√≥a h·ªçc");
    }
  };

  const getCategoryLabel = (category) => {
    const categoryLabels = {
      drug_awareness: "Nh·∫≠n th·ª©c v·ªÅ ma t√∫y",
      prevention_skills: "K·ªπ nƒÉng ph√≤ng tr√°nh",
      refusal_skills: "K·ªπ nƒÉng t·ª´ ch·ªëi",
      life_skills: "K·ªπ nƒÉng s·ªëng",
      counseling: "T∆∞ v·∫•n",
      rehabilitation: "Ph·ª•c h·ªìi",
    };
    return categoryLabels[category] || category;
  };

  const getLevelLabel = (level) => {
    const levelLabels = {
      beginner: "C∆° b·∫£n",
      intermediate: "Trung c·∫•p",
      advanced: "N√¢ng cao",
    };
    return levelLabels[level] || level;
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <AdminSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      <div className="flex-1 flex flex-col">
        <AdminHeader onMenuToggle={() => setSidebarOpen(true)} />
        <main className="flex-1 p-6">
          <div className="mb-6 flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Qu·∫£n l√Ω kh√≥a h·ªçc</h1>
              <p className="text-gray-600">Qu·∫£n l√Ω t·∫•t c·∫£ kh√≥a h·ªçc trong h·ªá th·ªëng</p>
            </div>
            <Link
              to="/admin/courses/new"
              className="inline-flex items-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
            >
              <PlusIcon className="w-5 h-5 mr-2" />
              Th√™m kh√≥a h·ªçc
            </Link>
                      </div>

            {error && (
              <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-600">{error}</p>
              </div>
            )}

            {success && (
              <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <p className="text-green-600">{success}</p>
              </div>
            )}

            {/* Filters */}
          <div className="card mb-6">
            <div className="flex flex-col lg:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    placeholder="T√¨m ki·∫øm kh√≥a h·ªçc..."
                    value={filters.search}
                    onChange={(e) => handleFilterChange("search", e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                </div>
              </div>
              <select
                value={filters.category}
                onChange={(e) => handleFilterChange("category", e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="">T·∫•t c·∫£ danh m·ª•c</option>
                <option value="drug_awareness">Nh·∫≠n th·ª©c v·ªÅ ma t√∫y</option>
                <option value="prevention_skills">K·ªπ nƒÉng ph√≤ng tr√°nh</option>
                <option value="refusal_skills">K·ªπ nƒÉng t·ª´ ch·ªëi</option>
                <option value="life_skills">K·ªπ nƒÉng s·ªëng</option>
                <option value="counseling">T∆∞ v·∫•n</option>
                <option value="rehabilitation">Ph·ª•c h·ªìi</option>
              </select>
              <select
                value={filters.level}
                onChange={(e) => handleFilterChange("level", e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="">T·∫•t c·∫£ c·∫•p ƒë·ªô</option>
                <option value="beginner">C∆° b·∫£n</option>
                <option value="intermediate">Trung c·∫•p</option>
                <option value="advanced">N√¢ng cao</option>
              </select>
              <select
                value={filters.isPublished}
                onChange={(e) => handleFilterChange("isPublished", e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="true">ƒê√£ xu·∫•t b·∫£n</option>
                <option value="false">Ch∆∞a xu·∫•t b·∫£n</option>
              </select>
            </div>
          </div>
          {/* Courses Grid */}
          <CourseGrid
            courses={courses}
            loading={loading}
            pagination={pagination}
            onPageChange={handlePageChange}
            onDeleteCourse={handleDeleteCourse}
            getCategoryLabel={getCategoryLabel}
            getLevelLabel={getLevelLabel}
          />
        </main>
      </div>
    </div>
  );
};

export default AdminCourses; 